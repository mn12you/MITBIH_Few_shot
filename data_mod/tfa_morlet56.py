import numpy as np
import math
import time
import scipy.signal
from scipy.signal import convolve2d
import matplotlib.pyplot as plt
img_select = []
for i in np.arange(0,258, 4.62):
    img_select.append(int(round(i)))

def conv2(x, y, mode='same'):
    return convolve2d(x, y, mode=mode)


def MorletWavelet(fc):
    F_RATIO = 7
    Zalpha2 = 3.3
    sigma_f = fc / F_RATIO
    sigma_t = 1 / (2 * math.pi * sigma_f)
    A = 1 / math.sqrt(sigma_t * math.sqrt(math.pi))
    max_t = math.ceil(Zalpha2 * sigma_t)
    t = np.arange(-max_t, max_t + 1, 1)
    v1 = 1 / (-2 * sigma_t ** 2)
    v2 = 2j * math.pi * fc
    MW = A * np.exp(np.multiply(t, (np.multiply(t, v1) + v2) ))
    #MW = A * exp(t. * (t. * v1 + v2))
    return MW



def tfa_morlet(td, fs, fmin, fmax, fstep):
    TFmap = []
    for fc in np.arange(fmin, fmax, fstep):
        MW = MorletWavelet(fc / fs)
        #cr = conv2(td, MW, 'same')
        if len(td) >= len(MW):
            npad = len(td) - len(MW)- 1
            u_padded = np.pad(MW, (npad // 2, npad - npad // 2), mode='constant')
            cr = np.convolve(td, u_padded,  'same')
        else:
            npad = len(MW) - len(td) - 1
            #u_padded = np.pad(MW, (npad // 2, npad - npad // 2), mode='constant')
            cr = np.convolve(td, MW, 'same')
            cr = cr[(npad // 2 + 1): (len(cr)- (npad - npad // 2))]
        TFmap.append(abs(cr))
    img=np.array(TFmap)
    img = img[::-1,:]
    img = img[:,img_select]
    return img




# sig=np.array([0.0897613 , 0.08779253, 0.08546221, 0.0841865 , 0.08483191,
#         0.0869839 , 0.08914112, 0.08975091, 0.08832797, 0.08582078,
#         0.08396374, 0.08410453, 0.08637108, 0.08954853, 0.09198892,
#         0.09251879, 0.09087742, 0.08756588, 0.0839814 , 0.08201858,
#         0.08151593, 0.08318008, 0.08608249, 0.08873005, 0.0896883 ,
#         0.08775999, 0.0841595 , 0.08092305, 0.07987807, 0.08193481,
#         0.08532308, 0.08799052, 0.08947223, 0.0889008 , 0.08785554,
#         0.08743566, 0.08831752, 0.0895601 , 0.09072072, 0.09119825,
#         0.0911706 , 0.09042973, 0.08957087, 0.08844848, 0.0874018 ,
#         0.0868523 , 0.08726473, 0.08884808, 0.09109585, 0.09346213,
#         0.0955883 , 0.09726187, 0.09845712, 0.09930919, 0.10021442,
#         0.10190994, 0.10523894, 0.11054255, 0.1170811 , 0.12307949,
#         0.12659494, 0.12669777, 0.12410285, 0.12077824, 0.11886922,
#         0.11977501, 0.12395695, 0.13131528, 0.14147003, 0.15360647,
#         0.16583044, 0.17537494, 0.1797181 , 0.17843042, 0.17289226,
#         0.16662277, 0.16218288, 0.16071068, 0.16076244, 0.16051378,
#         0.15836355, 0.15465924, 0.15054664, 0.14673324, 0.14351328,
#         0.13996967, 0.13530264, 0.12911987, 0.12112928, 0.1120784 ,
#         0.10226187, 0.09288314, 0.08526683, 0.08076714, 0.07993614,
#         0.08184004, 0.08429002, 0.08505961, 0.08324537, 0.07971306,
#         0.07631113, 0.07453307, 0.07465726, 0.07585888, 0.07695687,
#         0.07707969, 0.07583607, 0.07316346, 0.06929585, 0.06499656,
#         0.06167784, 0.06089726, 0.06323615, 0.06728843, 0.06967737,
#         0.06640363, 0.05492513, 0.03597706, 0.01453633, 0.        ,
#         0.00578139, 0.04788193, 0.14129119, 0.29352764, 0.4968208 ,
#         0.72323156, 0.92787096, 1.06224269, 1.09338413, 1.01905713,
#         0.8695491 , 0.69384265, 0.53758321, 0.42511266, 0.35580385,
#         0.31329381, 0.27870705, 0.24080773, 0.19908067, 0.15813329,
#         0.12277417, 0.09491343, 0.07386981, 0.05792353, 0.04582843,
#         0.0378493 , 0.03365275, 0.03284282, 0.03399365, 0.03473753,
#         0.03366877, 0.03072302, 0.02765693, 0.02584532, 0.02585921,
#         0.02739213, 0.02856523, 0.02754952, 0.02452466, 0.02075263,
#         0.0197026 , 0.02119962, 0.02357303, 0.02584188, 0.02802729,
#         0.02901319, 0.02773749, 0.02714501, 0.02631249, 0.02563196,
#         0.02541469, 0.02600901, 0.02863315, 0.03053209, 0.03123963,
#         0.03190855, 0.03207749, 0.03193974, 0.03321481, 0.03328685,
#         0.03319337, 0.03175525, 0.02970387, 0.02821425, 0.03174375,
#         0.03368662, 0.0360445 , 0.03879902, 0.03956601, 0.04005547,
#         0.04032277, 0.04083288, 0.04251284, 0.04217822, 0.04241643,
#         0.04275206, 0.04377171, 0.04703953, 0.05088196, 0.05518652,
#         0.05884572, 0.06114605, 0.06296641, 0.06516461, 0.06742272,
#         0.07012349, 0.07231646, 0.07443252, 0.07678112, 0.07976623,
#         0.08345802, 0.08789214, 0.09267042, 0.09753899, 0.10344527,
#         0.10955845, 0.11598583, 0.12228545, 0.12824377, 0.13389555,
#         0.14015437, 0.14717882, 0.15389733, 0.16012123, 0.16547737,
#         0.17040011, 0.17559118, 0.18164357, 0.18855052, 0.19597036,
#         0.20308054, 0.20933669, 0.21421916, 0.21751239, 0.21953729,
#         0.22125448, 0.22397531, 0.22877426, 0.23538197, 0.24247725,
#         0.24789698, 0.25024223, 0.24919244, 0.2461134 , 0.24284525,
#         0.24060572, 0.2392435 , 0.23781968, 0.23495257, 0.22987639,
#         0.22285085, 0.21449102, 0.20577079, 0.19729972, 0.1895988 ,
#         0.18290241, 0.17687739, 0.17085146, 0.16423199])
# img = np.array(tfa_morlet(sig, 360, 4, 40, 0.643))
# print(img.shape)
# img = img[::-1,:]
# img_select = []
# for i in np.arange(0,258, 4.62):
#     img_select.append(int(round(i)))


# img = img[:,img_select]
# print(img)
# plt.imshow(img)
# plt.show()

    # elapsed = time.time() - t
    # print(elapsed)



